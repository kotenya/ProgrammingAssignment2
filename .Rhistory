a <- matrix(1:4, 2,2)
a
inv(a)
? matrix inveerse
?`matrix inverse`
?"matrix inveerse"
help()
help("matrix inverse")
`??matrix inverse`
??matrix inverse
??matrix
ginv(a)
package(MASS)
solve(A)
solve(a)
# The function make CacheMatrix creates a list
# to store 
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get, setsolve = setsolve,
getsolve - getsolve)
}
# This function checks wether the inverse of matrix has been
# computed and cached. If so, it returns the cached inverse. 
# Otherwise, it computes the inverse and stores it in the cache
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
m <- x$getsolve
if(!is.null(m)){
message("getting cashed data")
return m
}
data <- x$get
m <- solve(x, ...)
x$setsolve(x)
x
}
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
# The following function calculates the mean of the special 
# "vector" created with the above function. However, it first 
# checks to see if the mean has already been calculated. 
# If so, it gets the mean from the cache and skips the computation. 
# Otherwise, it calculates the mean of the data and sets the value 
# of the mean in the cache via the setmean function.
cachemean <- function(x, ...) {
        m <- x$getmean()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- mean(data, ...)
        x$setmean(m)
        m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get, setsolve = setsolve,
getsolve - getsolve)
}
# This function checks wether the inverse of matrix has been
# computed and cached. If so, it returns the cached inverse. 
# Otherwise, it computes the inverse and stores it in the cache
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
m <- x$getsolve
if(!is.null(m)){
message("getting cashed data")
return m
}
data <- x$get
m <- solve(x, ...)
x$setsolve(x)
x
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get, setsolve = setsolve,
getsolve - getsolve)
}
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
m <- x$getsolve
if(!is.null(m)){
message("getting cashed data")
return m
}
data <- x$get
m <- solve(x, ...)
x$setsolve(x)
x
}
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
m <- x$getsolve
if(!is.null(m)){
return m
}
data <- x$get
m <- solve(x, ...)
x$setsolve(x)
x
}
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
m <- x$getsolve
if(!is.null(m)){
return m
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(x)
m
}
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        m <- x$getmean()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- mean(data, ...)
        x$setmean(m)
        m
}
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        m <- x$getsolve()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- solve(data, ...)
        x$setsolve(m)
        m
}
a
cachesolve(a)
cacheSolve(a)
cachemean(c(0.2,1))
makeCacheMatrix(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get, setsolve = setsolve,
getsolve = getsolve)
}
makeCacheMatrix(a)
cacheSolve(a)
makeVector(c(0.2,1))
makeVector(x = c(0.2,1))
cachemean(x)
x = c(0.2,1)
makeVector(x)
cachemean(x)
q()
